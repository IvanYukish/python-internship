{
  "CAP theorem": {
    "for":"distributed systems, ",
    "Consistency": "C (consistency) — согласованность. Каждое чтение даст вам самую последнюю запись.",
    "Availability": "(availability) — доступность. Каждый узел (не упавший) всегда успешно выполняет запросы (на чтение и запись).",
    "Partition tolerance": ["Partition tolerance — устойчивость к распределению.",
                            "Даже если между узлами нет связи, они",
                            "продолжают работать независимо друг от друга."],
    "examples": {
      "CA": "Postgres",
      "AP": "Cassandra",
      "CP": "Redis, Mongo DB"
    }
  },

  "PACELC": {
    "extention for cap theorem": ""
  },
  "relational DB": {
    "Transactions": {
      "ACID": {
        "Atomicity": "All operations in a transaction succeed or every operation is rolled back.",
        "Consistency": "On the completion of a transaction, the database is structurally sound.",
        "Isolation": ["Transactions do not contend with one another. Contentious access",
                      "to data is moderated by the database so that transactions appear to run sequentially."],
        "Durability": ["Once the transaction has been completed and the writes and updates have been written to the disk",
                        "it will remain in the system even if a system failure occurs."]
      },
      "BASE": {
        "Basic Availability": "Система відповідає на будь-який запит, але ця відповідь може містити помилку або неузгоджені дані.",
        "Soft-state": "Стан системи може змінюватися згодом через зміни кінцевої узгодженості.",
        "Eventual consistency": "Система, зрештою, стане узгодженою. Вона продовжуватиме приймати дані та не перевірятиме кожну транзакцію на узгодженість."
      },
      "Transaction isolation levels": {
        "READ UNCOMMITTED": [
          "Після INSERT дані відразу стануть доступні для читання.",
          "Тобто ще до виклику COMMIT поза транзакцією можна отримати щойно додані дані."
        ],
        "READ COMMITTED": [
          "У даному випадку прочитати дані можна лише після виклику COMMIT.",
          "При чому всередині транзакції дані також будуть ще не доступні."
        ],
        "REPEATABLE READ": [
          "Відрізняється від другого тим, що знову додані дані вже будуть доступні всередині транзакції",
          "але не будуть доступні до підтвердження ззовні.",
          "Тут може виникнути теоретична проблема 'фантомного читання'.",
          "Коли всередині однієї транзакції відбувається читання даних,",
          "інша транзакція в цей момент вставляє нові дані,",
          "а перша транзакція знову читає ті самі дані."
        ],
        "SERIALIZABLE": [
          "На даному рівні MySQL блокує кожен рядок над яким відбувається якась дія,",
          "це виключає появу проблеми «фантомів». Насправді сенсу використовувати цей рівень немає,",
          "бо InnoDB і менш популярний Falcon вирішують цю проблему."
        ]
      }
    },
    "Indexes": {
      "Algorithms": [
        "Btree",
        "GIST",
        "SP-GIST",
        "HASH",
        "GIN",
        "BRIN (Block Range Indexes)"
      ],
      "TYPES": [
        "Clustered Index",
        "Non-Clustered Index",
        "Column Store Index",
        "Filtered Index",
        "Hash Index",
        "Unique Index"
      ]
    },
    "horizontal_scaling": [
      "Partitioning",
      "Replication",
      "Sharding"
    ],
    "vertical_scaling": [
      "more CPUs",
      "more memory"
    ]
  }
}
